{"version":3,"sources":["helpers/getLocation.js","helpers/getWeather.js","helpers/getData.js","components/WheatherApp/index.js","hooks/useData.js","App.js","serviceWorker.js","index.js"],"names":["getLocation","a","location","navigator","Promise","resolve","reject","geolocation","getCurrentPosition","getWeather","lon","coords","longitude","lat","latitude","url","console","log","fetch","resp","json","dataWeather","getData","data","weather","WheatherApp","props","useState","loading","state","setState","useEffect","then","useData","id","name","description","className","src","icon","alt","App","defaultLocation","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2MAMaA,EAAW,uCAAG,4BAAAC,EAAA,yDACtBC,EAAW,KAEX,gBAAiBC,WAHK,gCALnB,IAAIC,SAAQ,SAASC,EAASC,GACpCH,UAAUI,YAAYC,mBAAmBH,EAASC,MAIzB,OAIzBJ,EAJyB,uCAOnBA,GAPmB,2CAAH,qDCNXO,EAAU,uCAAG,WAAOP,GAAP,uBAAAD,EAAA,6DACnBS,EAAMR,EAASS,OAAOC,UACtBC,EAAMX,EAASS,OAAOG,SACtBC,EAHmB,4DAGwCF,EAHxC,gBAGmDH,GAC5EM,QAAQC,IAAI,uBAAwBP,EAAKG,GAJhB,SAKNK,MAAMH,GALA,cAKnBI,EALmB,gBAMCA,EAAKC,OANN,cAMnBC,EANmB,yBAQlBA,GARkB,4CAAH,sDCGVC,EAAO,uCAAG,4BAAArB,EAAA,6DAChBsB,EAAO,CACZrB,SAAU,GACVsB,QAAS,IAHY,SAMAxB,IANA,cAMtBuB,EAAKrB,SANiB,gBAODO,EAAWc,EAAKrB,UAPf,cAOtBqB,EAAKC,QAPiB,yBASfD,GATe,2CAAH,qDC6CLE,EA5CK,SAACC,GAAW,IAAD,ECDR,WAAO,IAAD,EACAC,mBAAS,CACpCJ,KAAM,GACNK,SAAS,IAHkB,mBACpBC,EADoB,KACbC,EADa,KAe5B,OATAC,qBAAU,WACTT,IAAUU,MAAK,SAACT,GACfO,EAAS,CACRP,KAAMA,EACNK,SAAS,SAGT,IAEIC,EDbmBI,GAAlBV,EADsB,EACtBA,KAAMK,EADgB,EAChBA,QAEV1B,EAAWqB,EAAKrB,SAChBsB,EAAUD,EAAKC,QAGnB,OAFAR,QAAQC,IAAI,QAASf,EAAUsB,GAG9B,6BACC,6CACCI,GAAW,0CACZ,8BAEEA,GACD,6BACC,6BACC,wDACA,6BACA,yBAAKM,GAAG,YACP,2CACA,+BAAKhC,EAASS,OAAOG,SAArB,MAED,yBAAKoB,GAAG,aACP,4CACA,+BAAKhC,EAASS,OAAOC,UAArB,OAGF,+CACkBY,EAAQW,KAD1B,OACqCX,EAAQA,QAAkBA,EAAQA,QAAQ,GAAGY,YAA3B,MADvD,IAEC,yBAAKC,UAAU,QAAQC,IAAMd,EAAQA,QAAkBA,EAAQA,QAAQ,GAAGe,KAA3B,MAAiCC,IAAI,aAErF,6BAEA,iC,MEnBUC,MAff,WAQC,OACC,yBAAKJ,UAAU,OACd,kBAAC,EAAD,CAAaK,gBATS,CACvB/B,OAAQ,CACPG,SAAU,EACVF,UAAW,QCKM+B,QACW,cAA7BC,OAAO1C,SAAS2C,UAEe,UAA7BD,OAAO1C,SAAS2C,UAEhBD,OAAO1C,SAAS2C,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBhD,WACrBA,UAAUiD,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.31028d7b.chunk.js","sourcesContent":["var getPosition = function() {\n\treturn new Promise(function(resolve, reject) {\n\t\tnavigator.geolocation.getCurrentPosition(resolve, reject);\n\t});\n};\n\nexport const getLocation = async () => {\n\tlet location = {};\n\n\tif ('geolocation' in navigator) {\n\t\tlocation = await getPosition();\n\t}\n\n\treturn location;\n};\n","export const getWeather = async (location) => {\n\tconst lon = location.coords.longitude;\n\tconst lat = location.coords.latitude;\n\tconst url = `https://fcc-weather-api.glitch.me/api/current?lat=${lat}&lon=${lon}`;\n\tconsole.log('Coordenadas enviadas', lon, lat);\n\tconst resp = await fetch(url);\n\tconst dataWeather = await resp.json();\n\n\treturn dataWeather;\n};\n","import { getLocation } from './getLocation';\nimport { getWeather } from './getWeather';\n\nexport const getData = async () => {\n\tconst data = {\n\t\tlocation: {},\n\t\tweather: {}\n\t};\n\n\tdata.location = await getLocation();\n\tdata.weather = await getWeather(data.location);\n\n\treturn data;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useData } from '../../hooks/useData';\n\nconst WheatherApp = (props) => {\n\tconst { data, loading } = useData();\n\n\tlet location = data.location;\n\tlet weather = data.weather;\n\tconsole.log('Data ', location, weather);\n\n\treturn (\n\t\t<div>\n\t\t\t<h1> Wheather APP</h1>\n\t\t\t{loading && <h1>Loading...</h1>}\n\t\t\t<hr />\n\n\t\t\t{!loading && (\n\t\t\t\t<div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2>You current location is:</h2>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t<div id=\"latitude\">\n\t\t\t\t\t\t\t<h3> Latitude: </h3>\n\t\t\t\t\t\t\t<p> {location.coords.latitude} </p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div id=\"longitude\">\n\t\t\t\t\t\t\t<h3> Longitude: </h3>\n\t\t\t\t\t\t\t<p> {location.coords.longitude} </p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<h2>\n\t\t\t\t\t\tThe wheather in {weather.name} is {!weather.weather ? 'N/S' : weather.weather[0].description}:\n\t\t\t\t\t\t<img className=\"color\" src={!weather.weather ? 'N/S' : weather.weather[0].icon} alt=\"weather\" />\n\t\t\t\t\t</h2>\n\t\t\t\t\t<hr />\n\n\t\t\t\t\t<div />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nWheatherApp.propTypes = {\n\tdefaultLocation: PropTypes.object\n};\n\nexport default WheatherApp;\n","import { useState, useEffect } from 'react';\nimport { getData } from '../helpers/getData';\n\nexport const useData = () => {\n\tconst [ state, setState ] = useState({\n\t\tdata: [],\n\t\tloading: true\n\t});\n\n\tuseEffect(() => {\n\t\tgetData().then((data) => {\n\t\t\tsetState({\n\t\t\t\tdata: data,\n\t\t\t\tloading: false\n\t\t\t});\n\t\t});\n\t}, []);\n\n\treturn state;\n};\n","import React from 'react';\nimport WheatherApp from './components/WheatherApp';\nimport './index.css';\nfunction App() {\n\tconst defautlLocation = {\n\t\tcoords: {\n\t\t\tlatitude: 0,\n\t\t\tlongitude: 0\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<WheatherApp defaultLocation={defautlLocation} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}